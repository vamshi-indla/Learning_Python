#https://www.hackerrank.com/challenges/sock-merchant/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the sockMerchant function below.
def sockMerchant(n, ar):
    count = 0
    for i in list(set(ar)): 
        count = count + int(ar.count(i)/2)
    return count

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    ar = list(map(int, input().rstrip().split()))

    result = sockMerchant(n, ar)

    fptr.write(str(result) + '\n')

    fptr.close()
=============================================================
#https://www.hackerrank.com/challenges/counting-valleys/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup&h_r=next-challenge&h_v=zen

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the countingValleys function below.
def countingValleys(n, s):
    count = 0
    valcnt = 0
    for i in s:
        if i == "U": count = count +  1
        if  i == "D": count = count -  1
        if count == 0 and i == "U":
            valcnt += 1
    return valcnt

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    s = input()

    result = countingValleys(n, s)

    fptr.write(str(result) + '\n')

    fptr.close()
=================================
# Jumping on the clouds
# https://www.hackerrank.com/challenges/jumping-on-the-clouds/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup&h_r=next-challenge&h_v=zen
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the jumpingOnClouds function below.
def jumpingOnClouds(c):
    cnt = 0
    i = 0 
    while True:
        #print(i)
        if i+1 >= n:
            break        
        try:
            if c[i+2] == 0 :
                cnt = cnt + 1
                i = i+2
            else:
                cnt = cnt + 1
                i = i+1
        except  IndexError:
            cnt = cnt + 1
            break
    return cnt
    


if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    c = list(map(int, input().rstrip().split()))

    result = jumpingOnClouds(c)

    fptr.write(str(result) + '\n')

    fptr.close()
=====================================
#https://www.hackerrank.com/challenges/repeated-string/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup&h_r=next-challenge&h_v=zen
# Repeated String
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the repeatedString function below.
def repeatedString(s, n):
    return int(n/len(s))*s.count('a') + s[0:n % len(s)].count('a')

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    n = int(input())

    result = repeatedString(s, n)

    fptr.write(str(result) + '\n')

    fptr.close()
    
#https://www.hackerrank.com/challenges/map-and-lambda-expression/problem
# Usage of lambda and map
cube = lambda x: x**3 # complete the lambda function 

def fibonacci(n):
    if (n==0):
        return []
    elif(n==1):
        return [0]
    else:
        ar = [0] * n
        ar[0] = 0
        ar[1] = 1
        for i in range(2,n):
            ar[i] = ar[i-1] + ar[i-2]
        return ar
    # return a list of fibonacci numbers

if __name__ == '__main__':
    n = int(input())
    print(list(map(cube, fibonacci(n))))
    
 # https://www.hackerrank.com/challenges/validate-list-of-email-address-with-filter/problem
 # Validate Email address
 import re
def fun(s):
    # return True if s is a valid email, else return False
    return bool(re.match(r'[^@]+@[^@]+\.[^@]+',s))

def filter_mail(emails):
    return list(filter(fun, emails))

if __name__ == '__main__':
    n = int(input())
    emails = []
    for _ in range(n):
        emails.append(input())

filtered_emails = filter_mail(emails)
filtered_emails.sort()
print(filtered_emails)
